name: Publish Workflow

on:
  push:
    tag:
      - v* 
  workflow_dispatch:
    inputs:
      release_version:
        description:  Provide the tag to publish the package
        required: false

permissions:
  contents: write
  
jobs:
  build_test:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}

    steps:
    
      - name: Check out code
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{  github.event.inputs.release_version }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install JFrog CLI
        run: curl -fL https://install-cli.jfrog.io | sh

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies for Node
        run: npm install 2>&1 | tee npm-install.log

      - name: Upload npm install log to Artifactory
        run: |
          jf rt u "npm-install.log" "${{ secrets.NPM_STAGING_ARTIFACTORY }}/logs/build_test/${{ github.event.inputs.release_version  }}/" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token=${{ secrets.JFROG_PASSWORD }}
         
      - name: Run tests
        run: npm test 2>&1 | tee npm-test.log
      
      - name: Upload npm test log to Artifactory
        run: |
          jf rt u "npm-test.log" "${{ secrets.NPM_STAGING_ARTIFACTORY }}/logs/build_test/${{ github.event.inputs.release_version  }}/" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token=${{ secrets.JFROG_PASSWORD }}
           
     
  security-scan:
    runs-on: ubuntu-latest
    needs: build_test

    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.inputs.release_version }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install JFrog CLI
        run: curl -fL https://install-cli.jfrog.io | sh
      
      - name: Install dependencies for Node
        run: npm install

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@master

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test and save report
        run: |
          snyk test 2>&1 | tee snyk-report.log

      - name: Upload Snyk log to Artifactory
        run: jf rt u "snyk-report.log" "${{ secrets.NPM_STAGING_ARTIFACTORY }}/logs/security_scan/${{github.event.inputs.release_version }}/" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token=${{ secrets.JFROG_PASSWORD }}


  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{  github.event.inputs.release_version }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install JFrog CLI
        run: curl -fL https://install-cli.jfrog.io | sh

      - name: Update version in package.json
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout -b release/${{ github.event.inputs.release_version }}
          npm version ${{ github.event.inputs.release_version }} --no-git-tag-version
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add package.json
          git commit -m "Update version to ${{ github.event.inputs.release_version }}"
          git push origin release/${{ github.event.inputs.release_version }}

      - name: Read version and package
        run: |
           PACKAGE_FILENAME=$(npm pack --pack-destination ./)
           echo "PACKAGE_FILENAME=$PACKAGE_FILENAME" >> $GITHUB_ENV

      - name: Configure .npmrc for JFrog
        run: |
            echo "registry=https://${{ secrets.JFROG_HOST_NAME }}/artifactory/api/npm/${{ secrets.NPM_STAGING_ARTIFACTORY }}/" > ~/.npmrc
            echo "//${{ secrets.JFROG_HOST_NAME }}/artifactory/api/npm/${{ secrets.NPM_STAGING_ARTIFACTORY }}/:_authToken=${{ secrets.JFROG_PASSWORD }}" >> ~/.npmrc
            echo "always-auth=true" >> ~/.npmrc

      - name: Publish package to JFrog
        run: npm publish "$PACKAGE_FILENAME" 2>&1 | tee npm-publish.log
        env:
          NODE_AUTH_TOKEN: ${{ secrets.JFROG_PASSWORD }}

      - name: Upload publish log to Artifactory
        run: jf rt u "npm-publish.log" "${{ secrets.NPM_STAGING_ARTIFACTORY }}/logs/publish/${{  github.event.inputs.release_version }}/" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token=${{ secrets.JFROG_PASSWORD }}

  sbom_generation:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}
 
    steps:
     - name: Checkout repository
       uses: actions/checkout@v4.1.7
       with:
          ref: ${{  github.event.inputs.release_version }}

     - name: Update package version
       run: |
            npm version ${{ github.event.inputs.release_version}} --no-git-tag-version

     - name: Install JFrog CLI
       run: curl -fL https://install-cli.jfrog.io | sh

     - name: Set up Node.js
       uses: actions/setup-node@v3
       with:
          node-version: '20'
 
     - name: Download veecli tarball
       run: |
          curl ${{ secrets.VEECLI_URL }} -o "veecli.tar.gz"
 
     - name: Extract veecli tarball
       run: |
          tar -xzf veecli.tar.gz
 
     - name: Run pre.sh
       run: |
          chmod +x ./veecli/pre.sh
          /bin/bash ./veecli/pre.sh
       working-directory: ./  
 
     - name: Write config.json from secret
       run: |
        cat <<EOF > ./veecli/config.json
        ${{ secrets.VEECLI_CONFIG_FILE }}
        EOF
 
     - name: Create input.json
       run: |
        PROJECT_NAME=$(basename "${{ github.repository }}")
        PROJECT_URL="https://github.com/${{ github.repository }}"
        cat <<EOF > ./veecli/input.json
          {
            "project": "$PROJECT_NAME",
            "version": "${{github.event.inputs.release_version }}",
            "exclude_test_dependency": true,
            "exclude_optional_dependency": true,
            "use_native_tools": true,
            "inputtype": "github",
            "inputs": [
              {
                "src_info": {
                  "srcurl": "$PROJECT_URL",
                  "matchingref": "release/${{github.event.inputs.release_version }}",
                  "type": "github"
                }
              }
            ],
            "merge_dependency_tree": true
          }
          EOF
 
     - name: Run veecli collect
       run: |
          ./veecli/veecli collect --inputfile input.json --output output --verbose
 
     - name: Upload SBOM log to Artifactory
       run: jf rt u "output/veelocal.log" "${{ secrets.NPM_STAGING_ARTIFACTORY }}/logs/sbom_generation/${{github.event.inputs.release_version }}/" --url https://${{ secrets.JFROG_HOST_NAME }}/artifactory/ --access-token=${{ secrets.JFROG_PASSWORD }}

     - name: Cleanup
       run: git push origin --delete release/${{ github.event.inputs.release_version }}
